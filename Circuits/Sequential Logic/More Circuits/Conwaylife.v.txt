

    module top_module(
    input clk,
    input load,
    input [255:0] data,
    output [255:0] q ); 
    
    reg		[2:0]	cnt;
    reg     [255:0] q_next;
    always @(*) begin
            for(int i=0;i<$bits(q);++i) begin
                if(i == 0)  
                    cnt = q[1] + q[16] + q[17] + q[15] + q[31] + q[240] + q[241] + q[255];
                else if(i == 15) 
                    cnt = q[0] + q[14] + q[16] + q[30] + q[31] + q[240] + q[254] + q[255];
                else if(i == 240) 
                    cnt = q[0] + q[1] + q[15] + q[224] + q[225] + q[241] + q[239] +q[255];
                else if (i == 255) 
                    cnt = q[0] + q[14] + q[15] + q[224] + q[238] + q[239] + q[240] + q[254];
                else if (i>0 & i <15) 
                    cnt = q[i-1] + q[i+1] + q[i+15] + q[i+16] + q[i+17] + q[i+16*15-1] + q[i+16*15] + q[i+16*15+1];
                else if (i>240 & i<255) 
                    cnt = q[i-1] + q[i+1] + q[i-15] + q[i-16] + q[i-17] + q[i-16*15-1] + q[i-16*15] + q[i-16*15+1] ;
                else if (i%16 == 0) 
                    cnt = q[i+1] + q[i+1-16] + q[i+1+16] + q[i-16] + q[i+16] + q[i+15] + q[i+15-16] + q[i+15+16];
                else if (i%16 == 15) 
                    cnt = q[i-1] + q[i-1-16] + q[i-1+16] + q[i-16] + q[i+16] + q[i-15] + q[i-15-16] + q[i-15+16];
                else 
                    cnt = q[i-1] + q[i+1] + q[i+16] + q[i-16] + q[i+16+1] + q[i+16-1] + q[i-16-1] + q[i-16+1];
       		 case (cnt)
                 3'd0: q_next[i] = 1'b0;
                 3'd1: q_next[i] = 1'b0;
           		 3'd2: q_next[i] = q[i];
                 3'd3: q_next[i] = 1'b1;
                 default : q_next[i] = 1'b0;
        	endcase
         end
    end
    
    always @(posedge clk) begin
        if(load == 1'b1)
            q <= data;
        else
            q <= q_next;
    end

endmodule
    
    

