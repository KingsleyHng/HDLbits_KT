module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
); //
	
    parameter IDLE = 0;
    parameter START = 1;
    parameter DATA = 2;
    parameter WAIT = 3;
    parameter STOP = 4;
    
    
    
    
    reg[3:0] state, next;
    reg[7:0] out;
    // Use FSM from Fsm_serial
    always@(*) begin
        case(state)
            IDLE: if (~in) begin 
               		 next = START; 
           		  end
            	  else begin
                      next = IDLE;
                  end
            
            START: next = DATA;
            
            DATA: if(i == 8) begin
                	if(in) begin
               	  		next = STOP;
                	end
                	else begin
                        next = WAIT;
                    end
            	  end
            	  else begin
                     next = DATA ;
                  end
            
            WAIT: next = (in) ? IDLE : WAIT;
            
                STOP:next = (in) ? IDLE : START;
           
            
        endcase
        
    end

    reg [3:0] i;
                
                always@(posedge clk) begin
                    if(reset) begin
                        state <= IDLE;
                    end                 
                    else begin
                       state <= next;   
                    end           
                end
                
                
                always@(posedge clk) begin
                    if(reset) begin
                        done <= 0;
                        i <= 0;
                    end
                     
                    else begin
                        case(next) 
                            DATA: begin i = i + 4'h1;  done <= 0; end
                            STOP: begin done <= 1;  i <= 0; end
                            
                           default: begin i <=0; done <= 0;end
                            
                        endcase
                    end           
                end
    
    
                
    always @(posedge clk) begin
    	if (reset) out <= 0;
        else if (next == DATA)
    		out[i] <= in;
    end

    assign out_byte = (done) ? out : 8'b0;
                            
                            
                            

endmodule
